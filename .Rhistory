mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id") %>%
separate(property, into = c("role", "property"), sep = "_")
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property))
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(waiver, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(waiver, id) %>%
summarize(TTL = sum(TTL)) #%>%
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) #%>%
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) #%>%
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) #%>%
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) #%>%
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) #%>%
length(unique(net_edges$from))
length(unique(net_edges$to))
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, role, waiver) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, waiver, role) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(role, waiver, id) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(role, id) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
edge_width_scale <- function(x){(((x-min(x))/(max(x)-min(x))) + 1)*2}
x <- edge_width_scale(net_nodes$TTL)
?forceNetwork
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "role", linkWidth = x,
linkColour = relation, fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -10) #,
"#afafaf"
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "role", linkWidth = x,
linkColour = "#afafaf", fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -10) #,
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(role, id) %>%
as.data.frame() %>%
mutate(index = row_number() -1) %>%
mutate(group = str_c(role, waiver, sep = " "))
net_nodes <- data %>%
mutate(codomain = str_c(to, to_type, sep="_")) %>%
mutate(domain = str_c(from, from_type, sep="_")) %>%
select(domain, codomain, TTL, `IHSS ?`) %>%
mutate(waiver = if_else(`IHSS ?` == "N", "PC-HMK", "IHSS")) %>%
select(-`IHSS ?`) %>%
#  unite(to_type, to, sep = "_")
gather(type, id, -TTL, -waiver)  %>%
separate(id, into = c("id", "role"), sep = "_") %>%
mutate(property = str_c(role, waiver, sep = "_")) %>%
select(-waiver, -type, -role) %>%
group_by(property, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(id, property) %>%
as.data.frame() %>%
mutate(index = row_number() -1)
duplicates <- filter(net_nodes[duplicated(net_nodes$id), ]) %>%
mutate(X = "MULT") %>%
select(id, X)
net_nodes <- net_nodes %>%
left_join(duplicates, by = "id")
# replace NAs in X vector (to subsequently replace them with values from property)
net_nodes[is.na(net_nodes$X), 5] <- 0
net_nodes <- net_nodes %>%
separate(property, into = c("role", "property"), sep = "_") %>%
mutate(waiver = if_else(X == "MULT", "MULT", property)) %>%
select(-index, -X, -property) %>%
group_by(role, waiver, id) %>%
summarize(TTL = sum(TTL)) %>%
arrange(role, id) %>%
as.data.frame() %>%
mutate(index = row_number() -1) %>%
mutate(group = str_c(role, waiver, sep = " "))
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = "#afafaf", fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -10) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = "#afafaf", fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -8) #,
## Specify colours for specific edges
# Find links to Valjean (11)
which(net_edges == "relatives", arr = TRUE)[1] - 1
edge_feature <-  which(net_edges == "relatives", arr = TRUE)
edge_feature <-  which(net_edges == "relatives", arr = TRUE)[, 1]
which(net_edges == "relatives", arr = TRUE)
edge_feature <-  which(net_edges == "relatives", arr = TRUE)[, 8]
edge_feature <-  which(net_edges == "relatives", arr = TRUE)[, 1]
# Create a colour vector
edge_colors <- ifelse(1:nrow(net_nodes) %in% edge_feature, "#bf3eff", "#666")
forceNetwork(Links = data$TTL, Nodes = data$CX, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", linkColour = edge_colors, opacity = 1, zoom = F, bounded = T)
forceNetwork(Links = data$TTL, Nodes = data$CX, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", linkColour = edge_colors, opacity = 1, zoom = F, bounded = T)
forceNetwork(Links = data$TTL, Nodes = data$CX, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 1, zoom = F, bounded = T)
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -8) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = "edge_colors", fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -8) #,
View(edge_colors)
# Create a colour vector
edge_colors <- ifelse(1:nrow(net_nodes) %in% edge_feature, "#762a83", "#1b7837")
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = "edge_colors", fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -8) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -8) #,
## Specify colours for specific edges
# Find links to Valjean (11)
which(net_nodes == to_type, arr = TRUE)[1] - 1
## Specify colours for specific edges
# Find links to Valjean (11)
which(net_nodes == role, arr = TRUE)[1] - 1
## Specify colours for specific edges
# Find links to Valjean (11)
which(net_nodes == "role", arr = TRUE)[1] - 1
## Specify colours for specific edges
# Find links to Valjean (11)
which(net_nodes == "domain", arr = TRUE)[1] - 1
## Specify colours for specific edges
# Find links to Valjean (11)
which(net_nodes == "domain", arr = TRUE) - 1
## Specify colours for specific edges
# Find links to Valjean (11)
which(net_nodes == "domain", arr = TRUE)[1] - 1
# Create a colour vector
edge_colors <- ifelse(1:nrow(net_edges) %in% edge_feature, "#762a83", "#1b7837")
edge_feature <-  which(net_edges == "relatives", arr = TRUE)[, 1]
# Create a colour vector
edge_colors <- ifelse(1:nrow(net_edges) %in% edge_feature, "#762a83", "#1b7837")
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.8, charge = -8) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -8) #,
node_colors <- c("#1b7837", "#5aae61", "#a6dba0", "#9970ab", "#762a83", "#fdb863")
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, colourScale = node_colors,
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -8) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, colourScale = node_colors,
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -8) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -8) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -8) #,
d3.scaleOrdinal(["#1b7837", "#5aae61", "#a6dba0", "#9970ab", "#762a83", "#fdb863"])
d3.scaleOrdinal("#1b7837", "#5aae61", "#a6dba0", "#9970ab", "#762a83", "#fdb863")
?d3.scaleOrdinal
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -8, arrows = TRUE) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge =) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = 0) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -9) #,
# Create a colour vector
edge_colors <- ifelse(1:nrow(net_edges) %in% edge_feature, "#d73027", "#fee08b")
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -9) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9, charge = -10) #,
forceNetwork(Links = net_edges, Nodes = net_nodes, Source = "domain", Target = "codomain",
NodeID = "index", Group = "group", linkWidth = x,
linkColour = edge_colors, #colourScale = "node_colors",
fontSize = 12, zoom = T, legend = T,
Nodesize = 4, opacity = 0.9)#, charge = -10) #,
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(broom)
library(stringr)
library(flexdashboard)
library(networkD3)
library(igraph)
library(network)
library(sna)
library(visNetwork)
library(threejs)
library(ndtv)
options(digits = 3)
set.seed(144)
base_size <- 22
theme_set(theme_minimal(base_size = base_size))
net_edges <- data %>%
mutate(domain = sort(.$from)) #%>%
net_edges <- data %>%
mutate(domain = sort(.$from)) %>%
mutate(domain = as.numeric(factor(net_edges$from)) -1) %>%
# continue numbering of codomain taking domain cardinality into account (reproduceably)
mutate(codomain = as.numeric(factor(links$to)) + (length(unique(.$from))) - 1) %>%
# create alternatively labeled vector specifying relation type
mutate(relation = if_else(`REL ?` == "N", "unrelated", "relatives")) %>%
# remove unnecessary variables
select(-`IHSS ?`, -`REL ?`)
net_edges <- data %>%
mutate(domain = sort(.$from)) %>%
mutate(domain = as.numeric(factor(.$from)) -1) %>%
# continue numbering of codomain taking domain cardinality into account (reproduceably)
mutate(codomain = as.numeric(factor(links$to)) + (length(unique(.$from))) - 1) %>%
# create alternatively labeled vector specifying relation type
mutate(relation = if_else(`REL ?` == "N", "unrelated", "relatives")) %>%
# remove unnecessary variables
select(-`IHSS ?`, -`REL ?`)
net_edges <- data %>%
mutate(domain = sort(.$from)) %>%
mutate(domain = as.numeric(factor(.$from)) -1) %>%
# continue numbering of codomain taking domain cardinality into account (reproduceably)
mutate(codomain = as.numeric(factor(.$to)) + (length(unique(.$from))) - 1) %>%
# create alternatively labeled vector specifying relation type
mutate(relation = if_else(`REL ?` == "N", "unrelated", "relatives")) %>%
# remove unnecessary variables
select(-`IHSS ?`, -`REL ?`)
